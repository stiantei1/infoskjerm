{"version":3,"sources":["Reddit.js","Bikes.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["Reddit","useState","joke","setJoke","useEffect","fetch","then","response","json","data","children","catch","err","console","error","className","title","selftext","service","createEnturService","clientName","Bikes","bikeStations","setBikeStations","getBikeRentalStationsByPosition","latitude","longitude","log","map","stationData","key","id","station","Station","props","name","bikesAvailable","spacesAvailable","Clock","dateTime","DateTime","local","setLocale","toLocaleString","TIME_24_WITH_SECONDS","weekday","day","month","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wPA0BeA,EAtBA,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,KAajB,OAJAC,qBAAU,WANNC,MALO,4DAMNC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUL,EAAQK,EAAKC,KAAKC,SAAS,GAAGD,SAC7CE,OAAM,SAACC,GAAD,OAASC,QAAQC,MAAMF,QAK/B,IAEIV,EAAQ,yBAAKa,UAAU,UAC1B,2BAAIb,EAAKc,OACT,2BAAId,EAAKe,WAGT,sC,QClBFC,E,MAAUC,GAAmB,CAAEC,WAAY,0BAsBlCC,EApBD,WAAO,IAAD,EACwBpB,mBAAS,IADjC,mBACTqB,EADS,KACKC,EADL,KAWhB,OARAnB,qBAAU,WACNc,EAAQM,gCACJ,CAACC,SAAU,WAAYC,UAAW,YAClC,KACFpB,MAAK,SAACG,GAAD,OAAUc,EAAgBd,QAClC,IAEHI,QAAQc,IAAIL,GACH,yBAAKP,UAAU,gBACpB,wCACCO,EAAaM,KAAI,SAACC,GAAD,OACd,kBAAC,EAAD,CAASC,IAAKD,EAAYE,GAAIC,QAASH,SAS7CI,EAAU,SAACC,GAAW,IAChBF,EAAYE,EAAZF,QAGR,OAFAnB,QAAQc,IAAIK,GAGZ,yBAAKjB,UAAU,WACViB,EAAQG,KADb,aAC6BH,EAAQI,eADrC,oBACsEJ,EAAQK,kB,QCZnEC,EApBD,WACV,IAAMC,EAAWC,WAASC,QAAQC,UAAU,SAG5C,OAFA7B,QAAQc,IAAIY,GAGR,yBAAKxB,UAAU,SACX,wBAAIA,UAAU,QACTwB,EAASI,eAAeH,WAASI,uBAEtC,4BACKL,EAASI,eAAe,CACrBE,QAAS,OACTC,IAAK,UACLC,MAAO,YCCZC,EAXH,WACR,OACI,yBAAKjC,UAAU,OACb,2CACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAQkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMkD,c","file":"static/js/main.e190429c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst APIurl = \"https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1\";\n\nconst Reddit = () => {\n    const [joke, setJoke] = useState({});\n    const getJoke = () => {\n        fetch(APIurl)\n        .then((response) => response.json())\n        .then((json) => setJoke(json.data.children[0].data))\n        .catch((err) => console.error(err));\n    };\n\n    useEffect(() => {\n        getJoke();\n    }, []);\n\n    return joke ? (<div className=\"reddit\">\n        <p>{joke.title}</p>\n        <p>{joke.selftext}</p>\n    </div>\n    ) : (\n        <></>\n    );\n};\n\nexport default Reddit;","import React, {useState, useEffect } from \"react\";\nimport createEnturService from '@entur/sdk';\n\n\nconst service = createEnturService({ clientName: 'stianteien-infoskjerm' })\n\nconst Bikes = () => {\n    const [bikeStations, setBikeStations] = useState([]);\n\n    useEffect(() => {\n        service.getBikeRentalStationsByPosition(\n            {latitude: 59.9289553, longitude: 10.7586829},\n            300\n        ).then((data) => setBikeStations(data));\n    }, []);\n\n    console.log(bikeStations);\n    return ( <div className=\"BikeStations\">\n        <h3>Bysykkel</h3>\n        {bikeStations.map((stationData) => (\n            <Station key={stationData.id} station={stationData} />\n        ))}\n        </div>\n    );\n};\n\nexport default Bikes;\n\n\nconst Station = (props) => {\n    const { station } = props;\n    console.log(station);\n\n    return (\n    <div className=\"station\">\n        {station.name} - ledig: {station.bikesAvailable} : ledigPlasser: {station.spacesAvailable}\n\n    </div>\n    );\n};","import React from \"react\";\nimport { DateTime } from \"luxon\";\n\nconst Clock = () => {\n    const dateTime = DateTime.local().setLocale(\"nb-NO\");\n    console.log(dateTime);\n\n    return (\n        <div className=\"clock\">\n            <h2 className=\"time\">\n                {dateTime.toLocaleString(DateTime.TIME_24_WITH_SECONDS)}\n            </h2>   \n            <h2>\n                {dateTime.toLocaleString({\n                    weekday: \"long\",\n                    day: \"numeric\",\n                    month: \"long\"\n                })}\n            </h2> \n         </div>\n    );\n};\n\nexport default Clock;","import React from \"react\";\nimport \"./App.css\";\nimport Reddit from \"./Reddit\";\nimport Bikes from \"./Bikes\";\nimport Clock from \"./Clock\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n          <h1>Inforskjerm</h1>\n            <Clock />\n            <Reddit />\n            <Bikes />\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}